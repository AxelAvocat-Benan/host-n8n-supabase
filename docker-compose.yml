volumes:
  n8n_storage:
  postgres_storage:

networks:
  n8n-network:
  supabase-network:

# Define reusable service configurations
x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['n8n-network']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=${N8N_POSTGRES_HOST}
    - DB_POSTGRESDB_PORT=${N8N_POSTGRES_PORT} # Inside the container, we use the default port for postgres
    - DB_POSTGRESDB_USER=${N8N_POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${N8N_POSTGRES_PASSWORD}
    - DB_POSTGRESDB_DATABASE=${N8N_POSTGRES_DB}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
    - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
    - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
    - N8N_RUNNERS_ENABLED=true
    - N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true

services:
  postgres:
    image: postgres:16-alpine
    hostname: ${N8N_POSTGRES_HOST}
    networks:
      - n8n-network
      - supabase-network
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${N8N_POSTGRES_USER}
      - POSTGRES_PASSWORD=${N8N_POSTGRES_PASSWORD}
      - POSTGRES_DB=${N8N_POSTGRES_DB}
    ports:
      - "${N8N_POSTGRES_PORT_EXTERNAL}:5432"
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${N8N_POSTGRES_USER} -d ${N8N_POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    hostname: n8n-import
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n # Hérite de la configuration de base, y compris l'image par défaut et l'environnement
    build: # Ajout de la section build pour utiliser notre Dockerfile personnalisé
      context: ./n8n_config # Chemin vers le répertoire contenant le Dockerfile
      dockerfile: Dockerfile
    # La directive 'image:' de l'ancre *service-n8n sera ignorée à cause de 'build:'
    hostname: n8n
    container_name: n8n
    restart: unless-stopped
    environment: # Étend ou surcharge l'environnement de l'ancre
      # Variables héritées de *service-n8n :
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=${N8N_POSTGRES_HOST}
      - DB_POSTGRESDB_PORT=${N8N_POSTGRES_PORT}
      - DB_POSTGRESDB_USER=${N8N_POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${N8N_POSTGRES_PASSWORD}
      - DB_POSTGRESDB_DATABASE=${N8N_POSTGRES_DB}
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_PERSONALIZATION_ENABLED=false
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET}
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_RUNNERS_ENABLED=true
      - N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true # Déjà présent dans l'ancre, mais le répéter ne nuit pas
      # Nouvelle variable pour autoriser les modules externes :
      - NODE_FUNCTION_ALLOW_EXTERNAL=n8n-nodes-mcp,axios # axios est souvent utilisé par les noeuds HTTP
    ports:
      - ${N8N_PORT}:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully
    networks:
      - n8n-network
      - supabase-network
    extra_hosts:
      - "host.docker.internal:host-gateway"